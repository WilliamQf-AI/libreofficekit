// *** Autogenerated file - created by configure.ac ***
// you should save the auto-generated vs-code-templates.code-workspace to a separate file
// to prevent your changes from being overwritten
{
	"extensions": {
		"recommendations": [
			"ms-vscode.cpptools"
		]
	},
	"folders": [
		{
			"name": "srcdir",
			"path": "./"
		},
		{
			"name": "builddir",
			"path": "./"
		}
	],
	"settings": {
		"files.exclude": {
			"/compile_commands.json": true,
			"/dictionaries/": true,
			"/helpcontent2/": true,
			"/icon-themes/": true,
			"/translations/": true
		},
		"files.watcherExclude": {
			"/dictionaries/": true,
			"/helpcontent2/": true,
			"/icon-themes/": true,
			"/translations/": true
		},
		"files.associations": {
			"*.patch.[0-9]": "diff",
			"*.hdl": "cpp",
			"*.ipp": "cpp"
		},
		// FIXME: arguably the generator should place it in the builddir, not srcdir
		"C_Cpp.default.compileCommands": "${workspaceFolder:srcdir}/compile_commands.json",
		// only used if the file doesn't match anything in the compile_commands.json - aka externals
		// libxml includes just added as example/for reference
		"C_Cpp.default.includePath": [
			"${workspaceFolder:srcdir}/workdir/UnpackedTarball/**",
			"${workspaceFolder:srcdir}/vcl/inc",
"${workspaceFolder:srcdir}/include",
"${workspaceFolder:srcdir}/config_host",
		],
		"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,
		"C_Cpp.default.cppStandard": "c++17",
		// point this to LibreOffice's version of clang-format 5.0.0,
		// otherwise clang-format from the plugin is used, and that
		// gives slightly different results
		"C_Cpp.clang_format_path": "./solenv/clang-format",
		"editor.rulers": [
			100
		],
		"gitlens.autolinks": [
			{
				"prefix": "tdf#",
				"url": "https://bugs.documentfoundation.org/show_bug.cgi?id=<num>"
			}
		],
		"C_Cpp.default.compilerPath": "cl.exe"
	},
	"tasks": {
		"version": "2.0.0",
		"tasks": [
			{
				"label": "full make",
				"detail": "runs make in builddir to update everything",
				"type": "shell",
				"command": "make build-nocheck",
				"group": {
					"kind": "build",
					"isDefault": true
				},
			},
			{
				"label": "create compile-commands.json",
				"detail": "runs make vim-ide-integration to create the compile-commands.json file",
				"type": "shell",
				"command": "make",
				"args": [
					"vim-ide-integration"
				],
				"group": "build",
				// doesn't really depend on full make, but doesn't hurt
				// updating the compile-commands is not needed all the time and also demonstrate
				// how to use dependencies in tasksâ€¦
				"dependsOn": [
					"full make"
				],
				"problemMatcher": [] // don't ask when manually running the task
			},
			{
				"label": "remove profile-dir",
				"detail": "removes the temporary user-profile directory",
				"type": "shell",
				"command": "rm",
				"args": [
					"-rf",
					"./workdir/vs-code-temporary-user-profile"
				],
				"group": "none",
				"dependsOn": [
					"full make"
				],
				"problemMatcher": []
			}
		]
	}
}
